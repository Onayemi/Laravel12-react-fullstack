# Download icon image
https://storyset.com/cloud

php artisan storage:link

## Create Middleware for protecting pages

php artisan make:middleware RoleMiddleware

App/Http/Middleware/RoleMiddleware.php ---> location

public function handle(Request $request, Closure $next, ...$roles): Response
{
if(!Auth::check() || !in_array(Auth::user()->role, $roles)) {
        return response()->view('errors.unauthorized');
    }
    return $next($request);
}

web.php
use App\Http\Middleware\RoleMiddleware;

Route::middleware(['auth', 'verified', 'role:admin'])->group(function () {
Route::get('admin/users', [TestController::class, 'admin'])->name('admin.users');
});
Route::middleware(['auth', 'verified', 'role:superadmin'])->group(function () {
Route::get('superadmin/system', [TestController::class, 'superadmin'])->name('superadmin.system');
});

php artisan optimize

## Register the middleware

Register the middleware in bootstrap/app.php

use App\Http\Middleware\RoleMiddleware;

$middleware->alias([
'role' => RoleMiddleware::class,
]);

resouces/views/errors/unauthorized.blade.php
search for: 403 unauthorized html css code

## Notification
add it in http/middleware/HandleInertiaRequest.php
'flash' => [
    'message' => fn () => $request->session()->get('message')
],

Install shadcn soonner
Add <Toaster /> to resources/js/layouts/app-layout.tsx

{children}
<Toaster position='top-right' richColors />

index.tsx
const { flash } = usePage<{ flash: { message?: string } }>().props;

useEffect(() => {
  if(flash.message){
    toast.success(flash.message);
  }
}, [flash.message]);

create.tsx
post('/posts', {
            onSuccess: () => {
                toast.success('Product has been created.');
                reset();
            },
            // onError: () => {
            //     toast.error('Posts has not been created.');
            // },
        });

This worked for me, hope it helps
Restart the server
npm run build
npm run dev
php artisan serve

## resources/j/components/app-sidebar.tsx

export function AppSidebar() {
    const { auth } = usePage().props;
    const userRole = auth?.user?.role || 'user';

    const mainNavItems: NavItem[] = [
        {
            title: 'Dashboard',
            href: '/dashboard',
            icon: LayoutGrid,
        },
        // {
        //     title: 'Manage Posts',
        //     href: '/posts',
        //     icon: Briefcase,
        // },
    ];

    const adminNavItems: NavItem[] = [
        {
            title: 'Manage Posts',
            href: '/posts',
            icon: Briefcase,
        },
    ];
    const superAdminNavItems: NavItem[] = [
        {
            title: 'Manage Posts',
            href: '/posts',
            icon: Briefcase,
        },
        // {
        //     title: 'System Controls',
        //     href: '/superadmin/system',
        //     icon: Shield,
        // },
    ];

    let roleBasedNavItems = [...mainNavItems];
    if (userRole === 'admin') {
        roleBasedNavItems = [...roleBasedNavItems, ...adminNavItems];
    }
    if (userRole === 'superadmin') {
        roleBasedNavItems = [...roleBasedNavItems, ...adminNavItems, ...superAdminNavItems];
    }


    return (
        <SidebarContent>
                <NavMain items={roleBasedNavItems} />
                ----
    )

    ## Instal lodash
    npm i lodash
    npm i --save-dev @types/lodash

    <!-- How toget location with ip address in laravel -->
    https://github.com/stevebauman/location

    composer require stevebauman/location
   

    php artisan make:notification PostNotification

    # framer-motion setup
    https://motion.dev/docs
    npm i framer-motion
    import { motion } from "framer-motion"

    # Qrcode setup
    > npm install react-qr-code

    Use it in your React component:

    import React from 'react';
    import QRCode from 'react-qr-code';

    const QRCodeComponent = () => {
        const qrValue = JSON.stringify({
        name: 'John Doe',
        email: 'john@example.com',
        website: 'https://remlextech.com',
    });
    return (
        <div>
        <QRCode value="https://www.youtube.com/@CodeShotcut" />
        <QRCode value={qrValue} />
        </div>
    );
    };
    export default QRCodeComponent;

    # PDF Generator
    https://github.com/barryvdh/laravel-dompdf

    composer require barryvdh/laravel-dompdf

    php artisan vendor:publish --provider="Barryvdh\DomPDF\ServiceProvider"

    In controller

    use Barryvdh\DomPDF\Facade\Pdf;

    public function index(){
        $products = Product::ge();
        $data = [
        'title' => 'Fouder of Web IT',
        'date' => date('m/d/Y'),
        'products' => $products,
        ];
        // $pdf = Pdf::loadView('pdf.invoice', $data);
        $pdf = Pdf::loadView('pdf.generate-product-pdf', $data);
        return $pdf->download('invoice.pdf');
    }

    Save only to direcory
    $pdf = Pdf::loadView('pdf.generate-product-pdf', $data)->save(public_path('invoice.pf'));

    $pdf = Pdf::loadView('pdf.generate-product-pdf', $data)->save(public_path('email-template', time(). rand('9999', '9999999')). Str::random('10'). '.pdf');

    Note: create blade fo this e.g. pdf/generate-product-pdf.blade.php

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{{$title}}</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" rel="stylesheet">
    </head>
    <body>
        <h1>Title: {{$title}}</h1>
        <h2>Date: {{$date}}</h2>
        <table class="table table-bordered border border-primary">
            <thead>
                <tr>
                    <td>Id</td>
                    <td>Name</td>
                    <td>Email</td>
                </tr>
            </thead>
            <tbody>
                @foreach($users as $item)
                <tr>
                    <td>{{$item->id}}</td>
                    <td>{{$item->name}}</td>
                    <td>{{$item->email}}</td>
                </tr>
                @endforeach
            </tbody>
        </table>

    </body>
    </html>

    # ckeditor 4
    npm i ckeditor4-react

    import React from 'react';
import { CKEditor } from 'ckeditor4-react';

function App() {
	return <CKEditor initData="<p>This is an example CKEditor 4 WYSIWYG editor instance.</p>" />;
}

export default App;
